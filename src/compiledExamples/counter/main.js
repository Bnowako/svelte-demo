/* main.svelte generated by Svelte v3.50.1 */
"use strict";

const { SvelteComponent: SvelteComponent$, append: append$, detach: detach$, element: element$, init: init$, insert: insert$, listen: listen$, noop: noop$, safe_not_equal: safe_not_equal$, set_data: set_data$, space: space$, text: text$ } = require("/Users/blazejnowakowski/Projects/svelte/internal");

function create_fragment(ctx) {
	let p$;
	let t0$;
	let t1$;
	let t2$;
	let button$;
	let mounted;
	let dispose;

	return {
		c() {
			p$ = element$("p");
			t0$ = text$("Counter: ");
			t1$ = text$(/*count*/ ctx[0]);
			t2$ = space$();
			button$ = element$("button");
			button$.textContent = "Click";
		},
		m(target, anchor) {
			insert$(target, p$, anchor);
			append$(p$, t0$);
			append$(p$, t1$);
			insert$(target, t2$, anchor);
			insert$(target, button$, anchor);

			if (!mounted) {
				dispose = listen$(button$, "click", /*onClick*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data$(t1$, /*count*/ ctx[0]);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(p$);
			if (detaching) detach$(t2$);
			if (detaching) detach$(button$);
			mounted = false;
			dispose();
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let count = 0;

	const onClick = () => {
		$$invalidate(0, count++, count);
	};

	return [count, onClick];
}

class Main$ extends SvelteComponent$ {
	constructor(options) {
		super();
		init$(this, options, instance$, create_fragment, safe_not_equal$, {});
	}
}

exports.default = Main$;