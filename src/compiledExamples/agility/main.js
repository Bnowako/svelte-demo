/* main.svelte generated by Svelte v3.50.1 */
"use strict";

const { SvelteComponent: SvelteComponent$, detach: detach$, element: element$, init: init$, insert: insert$, listen: listen$, noop: noop$, run_all: run_all$, safe_not_equal: safe_not_equal$, set_data: set_data$, space: space$, text: text$ } = require("/Users/blazejnowakowski/Projects/svelte/internal");

function create_fragment(ctx) {
	let t0$;
	let t1$;
	let t2$;
	let t3$;
	let t4$;
	let t5$_value$ = /*agility*/ ctx[0] * /*power*/ ctx[1] + "";
	let t5$;
	let t6$;
	let button0$;
	let t8$;
	let button1$;
	let t10$;
	let button2$;
	let mounted;
	let dispose;

	return {
		c() {
			t0$ = text$("Agility: ");
			t1$ = text$(/*agility*/ ctx[0]);
			t2$ = text$("\nPower: ");
			t3$ = text$(/*power*/ ctx[1]);
			t4$ = text$("\nStats: ");
			t5$ = text$(t5$_value$);
			t6$ = space$();
			button0$ = element$("button");
			button0$.textContent = "+ Agility";
			t8$ = space$();
			button1$ = element$("button");
			button1$.textContent = "+ Power";
			t10$ = space$();
			button2$ = element$("button");
			button2$.textContent = "Level Up";
		},
		m(target, anchor) {
			insert$(target, t0$, anchor);
			insert$(target, t1$, anchor);
			insert$(target, t2$, anchor);
			insert$(target, t3$, anchor);
			insert$(target, t4$, anchor);
			insert$(target, t5$, anchor);
			insert$(target, t6$, anchor);
			insert$(target, button0$, anchor);
			insert$(target, t8$, anchor);
			insert$(target, button1$, anchor);
			insert$(target, t10$, anchor);
			insert$(target, button2$, anchor);

			if (!mounted) {
				dispose = [
					listen$(button0$, "click", /*incrementAgility*/ ctx[2]),
					listen$(button1$, "click", /*incrementPower*/ ctx[3]),
					listen$(button2$, "click", /*levelUp*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*agility*/ 1) set_data$(t1$, /*agility*/ ctx[0]);
			if (dirty & /*power*/ 2) set_data$(t3$, /*power*/ ctx[1]);
			if (dirty & /*agility, power*/ 3 && t5$_value$ !== (t5$_value$ = /*agility*/ ctx[0] * /*power*/ ctx[1] + "")) set_data$(t5$, t5$_value$);
		},
		i: noop$,
		o: noop$,
		d(detaching) {
			if (detaching) detach$(t0$);
			if (detaching) detach$(t1$);
			if (detaching) detach$(t2$);
			if (detaching) detach$(t3$);
			if (detaching) detach$(t4$);
			if (detaching) detach$(t5$);
			if (detaching) detach$(t6$);
			if (detaching) detach$(button0$);
			if (detaching) detach$(t8$);
			if (detaching) detach$(button1$);
			if (detaching) detach$(t10$);
			if (detaching) detach$(button2$);
			mounted = false;
			run_all$(dispose);
		}
	};
}

function instance$($$self, $$props, $$invalidate) {
	let agility = 0;
	let power = 0;

	function incrementAgility() {
		$$invalidate(0, agility++, agility);
	}

	function incrementPower() {
		$$invalidate(1, power++, power);
	}

	function levelUp() {
		$$invalidate(0, agility += 5);
		$$invalidate(1, power += 7);
	}

	return [agility, power, incrementAgility, incrementPower, levelUp];
}

class Main$ extends SvelteComponent$ {
	constructor(options) {
		super();
		init$(this, options, instance$, create_fragment, safe_not_equal$, {});
	}
}

exports.default = Main$;